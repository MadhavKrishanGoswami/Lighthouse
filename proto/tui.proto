syntax = "proto3";

package orchestrator;

option go_package = "github.com/MadhavKrishanGoswami/Lighthouse/services/orchestrator"; 

// ====================
// Messages
// ====================
enum Status {
  UNKNOWN = 0;
  RUNNING = 1;
  STOPPED = 2;
  PAUSED = 3;
  RESTARTING = 4;
  EXITED = 5;
  DEAD = 6;
}
enum services{
  ORCHESTRATOR = 0;
  HOST_AGENT = 1;
  REGISTRY_Monitor = 2;
  Database = 3;
}


container {
  string name = 1;
  string image = 2;
  Status status = 3;
  bool watch = 4;
}

HostInfo {
  string mac_address = 1;
  string hostname = 2;
  string ip_address = 3;
  string lastHeartbeat = 4;
  repeated ContainerInfo container = 5;
}
HostList {
  repeated HostInfo hosts = 1;
}
servicesStatus {
  services service = 1;
  bool status = 2;
}

//===================
// Request / Response Wrappers
// ===================
DataStreamSend {
  HostList host_list = 1;
  string logs = 2;
  int32 cron_time = 3;
  repeated servicesStatus services_status = 4;
}
DataStreamReceived {
  string ack = 1;
}
SetWatchlistRequest {
  string container_name = 1;
  string host_mac = 2;
  bool watch = 2;
}
SetWatchlistResponse {
  bool success = 1;
  string message = 2;
}
SetCronTimeRequest {
  int32 cron_time = 1;
}
SetCronTimeResponse {
  bool success = 1;
  string message = 2;
}




// ===================
// services 
// =================
services OrchestratorService {
  rpc SendDatastream(stream DataStreamSend) returns (stream DataStreamReceived);
  rpc SetWatch(SetWatchlistRequest) returns (SetWatchlistResponse);
  rpc SetCronTime(SetCronTimeRequest) returns (SetCronTimeResponse);
}
