
syntax = "proto3";

package orchestrator;

option go_package = "github.com/MadhavKrishanGoswami/Lighthouse/services/orchestrator";

// ====================
// Messages
// ====================

// Port mapping definition
message PortMapping {
  string host_ip = 1;      // e.g., "0.0.0.0" or "::"
  uint32 host_port = 2;    // e.g., 8080
  uint32 container_port = 3; // e.g., 80
  string protocol = 4;     // "tcp" or "udp"
}

message ContainerInfo {
  string containerID = 1;     // Unique identifier for the container
  string name = 2;            // Name of the container
  string image = 3;           // Docker image used for the container
  repeated PortMapping ports = 4;  // Structured ports
  repeated string envVars = 5;
  repeated string volumes = 6;
  string network = 7;
}

message HostInfo {
  string mac_address = 1;
  string hostname = 2;
  string ip_address = 3;
  repeated ContainerInfo containers = 5;
}

// ====================
// Request / Response Wrappers
// ====================

message RegisterHostRequest {
  HostInfo host = 1;
}

message RegisterHostResponse {
  bool success = 1;
  string message = 2;
}

message HeartbeatRequest {
  string mac_address = 1;
  repeated ContainerInfo containers = 3;
}

message HeartbeatResponse {
  bool success = 1;
  string message = 2;
}

message UpdateContainerCommand {
  string containerUID = 2;                // which container to update
  string image = 3;                      // target image (repo:tag or digest)
  repeated string overrideEnvVars = 4;   // optional overrides
  repeated PortMapping overridePorts = 5; // structured ports override
  repeated string overrideVolumes = 6;
  string overrideNetwork = 7;
  string mac_address = 8; // target host
}

message UpdateStatus {
  string containerUID = 2;
  string image = 7; // target image (repo:tag or digest)
  string mac_address = 6; // target host
  enum Stage {
    UNKNOWN = 0;
    PULLING = 1;
    STARTING = 2;
    HEALTH_CHECK = 3;
    COMPLETED = 4;
    ROLLBACK = 5;
    FAILED = 6;
    RUNNING = 7;
  }

  Stage stage = 3;
  string logs = 4;        // status log/err messages
  string timestamp = 5;   // optional, useful for ordering
}

// ====================
// Service
// ====================

service HostAgentService {
  // Agent -> Orchestrator: Register host
  rpc RegisterHost(RegisterHostRequest) returns (RegisterHostResponse);

  // Agent -> Orchestrator: Periodic heartbeat (unary)
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // Agent -> Orchestrator: Initiates bidirectional stream
  // Orchestrator can send UpdateContainerCommand anytime after stream is open
  // Agent responds with UpdateStatus for each command
  rpc ConnectAgentStream(stream UpdateStatus) returns (stream UpdateContainerCommand);
}

