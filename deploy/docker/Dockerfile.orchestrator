# Stage 1: The Builder
# This stage compiles the Go application and its dependencies.
FROM golang:1.24.5-alpine AS builder

# Install necessary build tools: git, protobuf compiler, and make
RUN apk add --no-cache git protobuf protobuf-dev make

# Install Go tools for protobuf generation and sqlc
RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28 && \
    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2 && \
    go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest

# Set the working directory inside the container
WORKDIR /app

# Copy go.mod and go.sum files to leverage Docker's build cache
COPY go.mod go.sum ./
RUN go mod download

# Copy the entire project source code
COPY . .

# Generate protobuf and sqlc code using the Makefile targets
# This ensures the build process is consistent with your local development
RUN make protos
RUN make sqlc/orchestrator

# Build the orchestrator binary.
# CGO_ENABLED=0 creates a static binary.
# -o /app/orchestrator places the output in the root of the app directory.
RUN CGO_ENABLED=0 GOOS=linux go build \
    -a -installsuffix cgo \
    -o /app/orchestrator \
    ./services/orchestrator/cmd/orchestrator/main.go

# ---

# Stage 2: The Final Image
# This stage creates the final, lightweight image with only the compiled binary.
FROM alpine:latest

# Install CA certificates for making secure connections (e.g., to a database)
RUN apk --no-cache add ca-certificates

# Set the working directory
WORKDIR /root/

# Copy the compiled orchestrator binary from the builder stage
COPY --from=builder /app/orchestrator .

# Copy the configuration file.
# IMPORTANT: Ensure 'local.yaml' is configured to connect to the database
# from within a Docker container (e.g., use 'postgres' or 'dbLighthouse' as the hostname, not 'localhost').
COPY local.yaml .

# Copy migration files in case you want to run migrations from this container
COPY ./services/orchestrator/db/migration ./db/migration

# Expose the port the application runs on.
# You'll need to replace 8080 with the actual port your orchestrator listens on.
# EXPOSE 8080

# Command to run the application
ENTRYPOINT ["./orchestrator"]
CMD ["-config", "local.yaml"]
