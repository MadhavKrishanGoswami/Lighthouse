// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: tui.proto

package tui

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TUIService_SendDatastream_FullMethodName = "/tui.TUIService/SendDatastream"
	TUIService_StreamLogs_FullMethodName     = "/tui.TUIService/StreamLogs"
	TUIService_SetWatch_FullMethodName       = "/tui.TUIService/SetWatch"
	TUIService_SetCronTime_FullMethodName    = "/tui.TUIService/SetCronTime"
)

// TUIServiceClient is the client API for TUIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ===================
// service
// =================
type TUIServiceClient interface {
	SendDatastream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DataStreamReceived, DataStreamSend], error)
	// Dedicated log stream (server -> client). Client sends empty acks just to keepalive.
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DataStreamReceived, LogLine], error)
	SetWatch(ctx context.Context, in *SetWatchlistRequest, opts ...grpc.CallOption) (*SetWatchlistResponse, error)
	SetCronTime(ctx context.Context, in *SetCronTimeRequest, opts ...grpc.CallOption) (*SetCronTimeResponse, error)
}

type tUIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTUIServiceClient(cc grpc.ClientConnInterface) TUIServiceClient {
	return &tUIServiceClient{cc}
}

func (c *tUIServiceClient) SendDatastream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DataStreamReceived, DataStreamSend], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TUIService_ServiceDesc.Streams[0], TUIService_SendDatastream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataStreamReceived, DataStreamSend]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TUIService_SendDatastreamClient = grpc.BidiStreamingClient[DataStreamReceived, DataStreamSend]

func (c *tUIServiceClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DataStreamReceived, LogLine], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TUIService_ServiceDesc.Streams[1], TUIService_StreamLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataStreamReceived, LogLine]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TUIService_StreamLogsClient = grpc.BidiStreamingClient[DataStreamReceived, LogLine]

func (c *tUIServiceClient) SetWatch(ctx context.Context, in *SetWatchlistRequest, opts ...grpc.CallOption) (*SetWatchlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetWatchlistResponse)
	err := c.cc.Invoke(ctx, TUIService_SetWatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tUIServiceClient) SetCronTime(ctx context.Context, in *SetCronTimeRequest, opts ...grpc.CallOption) (*SetCronTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCronTimeResponse)
	err := c.cc.Invoke(ctx, TUIService_SetCronTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TUIServiceServer is the server API for TUIService service.
// All implementations must embed UnimplementedTUIServiceServer
// for forward compatibility.
//
// ===================
// service
// =================
type TUIServiceServer interface {
	SendDatastream(grpc.BidiStreamingServer[DataStreamReceived, DataStreamSend]) error
	// Dedicated log stream (server -> client). Client sends empty acks just to keepalive.
	StreamLogs(grpc.BidiStreamingServer[DataStreamReceived, LogLine]) error
	SetWatch(context.Context, *SetWatchlistRequest) (*SetWatchlistResponse, error)
	SetCronTime(context.Context, *SetCronTimeRequest) (*SetCronTimeResponse, error)
	mustEmbedUnimplementedTUIServiceServer()
}

// UnimplementedTUIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTUIServiceServer struct{}

func (UnimplementedTUIServiceServer) SendDatastream(grpc.BidiStreamingServer[DataStreamReceived, DataStreamSend]) error {
	return status.Errorf(codes.Unimplemented, "method SendDatastream not implemented")
}
func (UnimplementedTUIServiceServer) StreamLogs(grpc.BidiStreamingServer[DataStreamReceived, LogLine]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedTUIServiceServer) SetWatch(context.Context, *SetWatchlistRequest) (*SetWatchlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWatch not implemented")
}
func (UnimplementedTUIServiceServer) SetCronTime(context.Context, *SetCronTimeRequest) (*SetCronTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCronTime not implemented")
}
func (UnimplementedTUIServiceServer) mustEmbedUnimplementedTUIServiceServer() {}
func (UnimplementedTUIServiceServer) testEmbeddedByValue()                    {}

// UnsafeTUIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TUIServiceServer will
// result in compilation errors.
type UnsafeTUIServiceServer interface {
	mustEmbedUnimplementedTUIServiceServer()
}

func RegisterTUIServiceServer(s grpc.ServiceRegistrar, srv TUIServiceServer) {
	// If the following call pancis, it indicates UnimplementedTUIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TUIService_ServiceDesc, srv)
}

func _TUIService_SendDatastream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TUIServiceServer).SendDatastream(&grpc.GenericServerStream[DataStreamReceived, DataStreamSend]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TUIService_SendDatastreamServer = grpc.BidiStreamingServer[DataStreamReceived, DataStreamSend]

func _TUIService_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TUIServiceServer).StreamLogs(&grpc.GenericServerStream[DataStreamReceived, LogLine]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TUIService_StreamLogsServer = grpc.BidiStreamingServer[DataStreamReceived, LogLine]

func _TUIService_SetWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TUIServiceServer).SetWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TUIService_SetWatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TUIServiceServer).SetWatch(ctx, req.(*SetWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TUIService_SetCronTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCronTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TUIServiceServer).SetCronTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TUIService_SetCronTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TUIServiceServer).SetCronTime(ctx, req.(*SetCronTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TUIService_ServiceDesc is the grpc.ServiceDesc for TUIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TUIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tui.TUIService",
	HandlerType: (*TUIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetWatch",
			Handler:    _TUIService_SetWatch_Handler,
		},
		{
			MethodName: "SetCronTime",
			Handler:    _TUIService_SetCronTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendDatastream",
			Handler:       _TUIService_SendDatastream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLogs",
			Handler:       _TUIService_StreamLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tui.proto",
}
