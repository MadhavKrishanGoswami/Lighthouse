syntax = "proto3";

package tui;

option go_package = "github.com/MadhavKrishanGoswami/Lighthouse/services/common/genproto/tui"; 

// ====================
// Messages
// ====================




message ContainerInfo {
  string name = 1;
  string image = 2;
  enum Status {
  UNKNOWN = 0;
  RUNNING = 1;
  STOPPED = 2;
  PAUSED = 3;
  RESTARTING = 4;
  EXITED = 5;
  DEAD = 6;
  }
  Status status = 3;
  bool watch = 4;
}

message HostInfo {
  string mac_address = 1;
  string hostname = 2;
  string ip_address = 3;
  string lastHeartbeat = 4;
  repeated ContainerInfo containers = 5;
}
message HostList {
  repeated HostInfo hosts = 1;
}
message servicesStatus {
  enum services{
  ORCHESTRATOR = 0;
  REGISTRY_Monitor = 1;
  Database = 2;
 }
  services services_status = 1;
  bool status = 2;
}

//===================
// Request / Response Wrappers
// ===================
message DataStreamSend {
  HostList host_list = 1;
  string logs = 2; // legacy logs field (will be trimmed or empty once StreamLogs used)
  int32 cron_time = 3;
  repeated servicesStatus services_status = 4;
}
message DataStreamReceived {
  string ack = 1;
}

// Streaming log line (simple)
message LogLine {
  string line = 1; // already timestamped string
}
message SetWatchlistRequest {
  string container_name = 1;
  string host_mac = 2;
  bool watch = 3;
}
message SetWatchlistResponse {
  bool success = 1;
  string message = 2;
}
message SetCronTimeRequest {
  int32 cron_time = 1;
}
message  SetCronTimeResponse {
  bool success = 1;
  string message = 2;
}




// ===================
// service
// =================
service TUIService {
  rpc SendDatastream(stream DataStreamReceived) returns (stream DataStreamSend);
  // Dedicated log stream (server -> client). Client sends empty acks just to keepalive.
  rpc StreamLogs(stream DataStreamReceived) returns (stream LogLine);
  rpc SetWatch(SetWatchlistRequest) returns (SetWatchlistResponse);
  rpc SetCronTime(SetCronTimeRequest) returns (SetCronTimeResponse);
}
