// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: host-agent.proto

package orchestrator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HostAgentService_RegisterHost_FullMethodName       = "/orchestrator.HostAgentService/RegisterHost"
	HostAgentService_Heartbeat_FullMethodName          = "/orchestrator.HostAgentService/Heartbeat"
	HostAgentService_ConnectAgentStream_FullMethodName = "/orchestrator.HostAgentService/ConnectAgentStream"
)

// HostAgentServiceClient is the client API for HostAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostAgentServiceClient interface {
	// Agent -> Orchestrator: Register host
	RegisterHost(ctx context.Context, in *RegisterHostRequest, opts ...grpc.CallOption) (*RegisterHostResponse, error)
	// Agent -> Orchestrator: Periodic heartbeat (unary)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// Agent -> Orchestrator: Initiates bidirectional stream
	// Orchestrator can send UpdateContainerCommand anytime after stream is open
	// Agent responds with UpdateStatus for each command
	ConnectAgentStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpdateStatus, UpdateContainerCommand], error)
}

type hostAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostAgentServiceClient(cc grpc.ClientConnInterface) HostAgentServiceClient {
	return &hostAgentServiceClient{cc}
}

func (c *hostAgentServiceClient) RegisterHost(ctx context.Context, in *RegisterHostRequest, opts ...grpc.CallOption) (*RegisterHostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterHostResponse)
	err := c.cc.Invoke(ctx, HostAgentService_RegisterHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostAgentServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, HostAgentService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostAgentServiceClient) ConnectAgentStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpdateStatus, UpdateContainerCommand], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HostAgentService_ServiceDesc.Streams[0], HostAgentService_ConnectAgentStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateStatus, UpdateContainerCommand]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HostAgentService_ConnectAgentStreamClient = grpc.BidiStreamingClient[UpdateStatus, UpdateContainerCommand]

// HostAgentServiceServer is the server API for HostAgentService service.
// All implementations must embed UnimplementedHostAgentServiceServer
// for forward compatibility.
type HostAgentServiceServer interface {
	// Agent -> Orchestrator: Register host
	RegisterHost(context.Context, *RegisterHostRequest) (*RegisterHostResponse, error)
	// Agent -> Orchestrator: Periodic heartbeat (unary)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// Agent -> Orchestrator: Initiates bidirectional stream
	// Orchestrator can send UpdateContainerCommand anytime after stream is open
	// Agent responds with UpdateStatus for each command
	ConnectAgentStream(grpc.BidiStreamingServer[UpdateStatus, UpdateContainerCommand]) error
	mustEmbedUnimplementedHostAgentServiceServer()
}

// UnimplementedHostAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostAgentServiceServer struct{}

func (UnimplementedHostAgentServiceServer) RegisterHost(context.Context, *RegisterHostRequest) (*RegisterHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHost not implemented")
}
func (UnimplementedHostAgentServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedHostAgentServiceServer) ConnectAgentStream(grpc.BidiStreamingServer[UpdateStatus, UpdateContainerCommand]) error {
	return status.Errorf(codes.Unimplemented, "method ConnectAgentStream not implemented")
}
func (UnimplementedHostAgentServiceServer) mustEmbedUnimplementedHostAgentServiceServer() {}
func (UnimplementedHostAgentServiceServer) testEmbeddedByValue()                          {}

// UnsafeHostAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostAgentServiceServer will
// result in compilation errors.
type UnsafeHostAgentServiceServer interface {
	mustEmbedUnimplementedHostAgentServiceServer()
}

func RegisterHostAgentServiceServer(s grpc.ServiceRegistrar, srv HostAgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedHostAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HostAgentService_ServiceDesc, srv)
}

func _HostAgentService_RegisterHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostAgentServiceServer).RegisterHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostAgentService_RegisterHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostAgentServiceServer).RegisterHost(ctx, req.(*RegisterHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostAgentService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostAgentServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostAgentService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostAgentServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostAgentService_ConnectAgentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HostAgentServiceServer).ConnectAgentStream(&grpc.GenericServerStream[UpdateStatus, UpdateContainerCommand]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HostAgentService_ConnectAgentStreamServer = grpc.BidiStreamingServer[UpdateStatus, UpdateContainerCommand]

// HostAgentService_ServiceDesc is the grpc.ServiceDesc for HostAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orchestrator.HostAgentService",
	HandlerType: (*HostAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterHost",
			Handler:    _HostAgentService_RegisterHost_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _HostAgentService_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectAgentStream",
			Handler:       _HostAgentService_ConnectAgentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "host-agent.proto",
}
