// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: containers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getallContainersWhereWatched = `-- name: GetallContainersWhereWatched :many
SELECT id, container_uid, host_id, name, image, ports, env_vars, volumes, network, watch, created_at FROM containers WHERE watch = TRUE
`

// Retrieves all containers where watched is true
func (q *Queries) GetallContainersWhereWatched(ctx context.Context) ([]Container, error) {
	rows, err := q.db.Query(ctx, getallContainersWhereWatched)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Container
	for rows.Next() {
		var i Container
		if err := rows.Scan(
			&i.ID,
			&i.ContainerUid,
			&i.HostID,
			&i.Name,
			&i.Image,
			&i.Ports,
			&i.EnvVars,
			&i.Volumes,
			&i.Network,
			&i.Watch,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertContainer = `-- name: InsertContainer :one
INSERT INTO containers (
  container_uid,
  host_id,
  name,
  image,
  ports,
  env_vars,
  volumes,
  network
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT (container_uid)
DO UPDATE SET
  host_id = EXCLUDED.host_id,
  name = EXCLUDED.name,
  image = EXCLUDED.image,
  ports = EXCLUDED.ports,
  env_vars = EXCLUDED.env_vars,
  volumes = EXCLUDED.volumes,
  network = EXCLUDED.network
RETURNING id, container_uid, host_id, name, image, ports, env_vars, volumes, network, watch, created_at
`

type InsertContainerParams struct {
	ContainerUid string      `json:"container_uid"`
	HostID       pgtype.UUID `json:"host_id"`
	Name         string      `json:"name"`
	Image        string      `json:"image"`
	Ports        []string    `json:"ports"`
	EnvVars      []string    `json:"env_vars"`
	Volumes      []string    `json:"volumes"`
	Network      pgtype.Text `json:"network"`
}

// Inserts or updates container based on container_uid
func (q *Queries) InsertContainer(ctx context.Context, arg InsertContainerParams) (Container, error) {
	row := q.db.QueryRow(ctx, insertContainer,
		arg.ContainerUid,
		arg.HostID,
		arg.Name,
		arg.Image,
		arg.Ports,
		arg.EnvVars,
		arg.Volumes,
		arg.Network,
	)
	var i Container
	err := row.Scan(
		&i.ID,
		&i.ContainerUid,
		&i.HostID,
		&i.Name,
		&i.Image,
		&i.Ports,
		&i.EnvVars,
		&i.Volumes,
		&i.Network,
		&i.Watch,
		&i.CreatedAt,
	)
	return i, err
}
