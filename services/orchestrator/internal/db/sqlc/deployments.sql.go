// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: deployments.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertDeployment = `-- name: InsertDeployment :one
INSERT INTO deployments (
    container_id,
    host_id,
    target_image,
    status
) VALUES ($1, $2, $3, $4)
ON CONFLICT (container_id, host_id) 
DO UPDATE SET
    target_image = EXCLUDED.target_image,
    status = EXCLUDED.status
RETURNING id, container_id, host_id, target_image, status, created_at
`

type InsertDeploymentParams struct {
	ContainerID pgtype.UUID      `json:"container_id"`
	HostID      pgtype.UUID      `json:"host_id"`
	TargetImage string           `json:"target_image"`
	Status      DeploymentStatus `json:"status"`
}

// Inserts a deployment for a container on a host.
// If a deployment already exists for the same container+host and is still pending/running,
// do NOT overwrite it; otherwise, update target_image and status.
func (q *Queries) InsertDeployment(ctx context.Context, arg InsertDeploymentParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, insertDeployment,
		arg.ContainerID,
		arg.HostID,
		arg.TargetImage,
		arg.Status,
	)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.ContainerID,
		&i.HostID,
		&i.TargetImage,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
