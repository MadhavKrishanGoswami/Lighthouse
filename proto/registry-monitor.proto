syntax = "proto3";

package orchestrator;

option go_package = "github.com/MadhavKrishanGoswami/Lighthouse/services/orchestrator";


import "google/protobuf/timestamp.proto";

// ===================================================================
// RegistryMonitorService
//
// This service defines the contract for the "push" model, where the
// Registry Monitor actively reports (pushes) updates to the Orchestrator
// as soon as they are discovered.
// ===================================================================


// ====================
// Messages
// ====================

// WatchItem represents a single image tag that the Orchestrator wants
// the Registry Monitor to track.
message WatchItem {
  // An opaque, unique identifier generated by the Orchestrator.
  // The monitor MUST return this ID when reporting an update, allowing the
  // Orchestrator to quickly map an update to an internal deployment.
  string watch_id = 1;

  // The full name of the image to watch, without the tag.
  // e.g., "nginx", "library/ubuntu", "my-company/my-app"
  string image_name = 2;

  // The specific tag to watch for changes.
  // e.g., "latest", "1.25.0", "stable"
  string tag = 3;
}

// GetWatchlistRequest is sent by the Monitor to the Orchestrator to ask for its work.
message GetWatchlistRequest {
  // Optional: The name or ID of the monitor making the request. Useful for logging.
  string monitor_id = 1;
}

// GetWatchlistResponse contains the list of all images the monitor should track.
message GetWatchlistResponse {
  repeated WatchItem items_to_watch = 1;

  // The recommended polling interval in seconds. The Orchestrator can use this
  // to centrally control how frequently monitors check for updates, preventing
  // rate-limiting issues from container registries.
  int32 poll_interval_seconds = 2;
}

// ReportUpdateRequest is sent by the Monitor to the Orchestrator when a new
// image digest is found for a watched image tag. This is the "push".
message ReportUpdateRequest {
  // The opaque ID from the original WatchItem. This is the key field the
  // Orchestrator will use to process the update.
  string watch_id = 1;

  // The canonical, immutable digest of the newly discovered image version.
  // This is the definitive proof of an update.
  // e.g., "sha256:f6a8439135..."
  string new_digest = 2;

  // The timestamp of when the monitor detected this update, in UTC.
  google.protobuf.Timestamp detected_at = 3;
}

// ReportUpdateResponse is the Orchestrator's acknowledgment.
message ReportUpdateResponse {
  // Acknowledges that the Orchestrator has received the report and has queued
  // it for processing.
  bool acknowledged = 1;

  // An optional message for logging or debugging purposes.
  string message = 2;
}


// ====================
// Service Definition
// ====================

service RegistryMonitorService {
  // The Registry Monitor periodically calls this RPC to get a fresh list of images
  // to monitor. This allows the Orchestrator to centrally manage what's being
  // watched.
  rpc GetWatchlist(GetWatchlistRequest) returns (GetWatchlistResponse);

  // When a Monitor detects that an image's digest has changed, it calls
  // this endpoint to notify (push the update to) the Orchestrator.
  rpc ReportUpdate(ReportUpdateRequest) returns (ReportUpdateResponse);
}
