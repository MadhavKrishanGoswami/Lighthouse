
syntax = "proto3";

package orchestrator;

option go_package = "github.com/MadhavKrishanGoswami/Lighthouse/services/orchestrator";

// ====================
// Messages
// ====================

message ContainerInfo {
  string containerID = 1;     // Unique identifier for the container
  string name = 2;            // Name of the container
  string image = 3;           // Docker image used for the container
  string digest = 8;          // Image digest for versioning
  repeated string ports = 4;  // List of ports exposed by the container
  repeated string envVars = 5;
  repeated string volumes = 6;
  string network = 7;
}

message HostInfo {
  string mac_address = 1;
  string hostname = 2;
  string ip_address = 3;
  repeated ContainerInfo containers = 5;
}



message UpdateContainerCommand {
  string deploymentID = 1;
  string image = 2;
  repeated string overrideEnvVars = 3;
  repeated string overridePorts = 4;
  repeated string overrideVolumes = 5;
  string overrideNetwork = 6;
}

message UpdateStatus {
  string deploymentID = 1;
  string containerID = 2;
  enum Stage {
    UNKNOWN = 0;
    PULLING = 1;
    STARTING = 2;
    HEALTH_CHECK = 3;
    COMPLETED = 4;
    ROLLBACK = 5;
    FAILED = 6;
  }
  Stage stage = 3;
  string logs = 4;
}

// ====================
// Request / Response Wrappers
// ====================

message RegisterHostRequest {
  HostInfo host = 1;
}

message RegisterHostResponse {
  bool success = 1;
  string message = 2;
}
message HeartbeatRequest {
  string mac_address = 1;
  repeated ContainerInfo containers = 3;
}
message HeartbeatResponse {
  bool success = 1;
  string message = 2;
}
message UpdateContainerRequest {
  string hostID = 1;
  UpdateContainerCommand command = 2;
}

message UpdateContainerResponse {
  bool accepted = 1;
  string message = 2;
}

// ====================
// Service
// ====================

service HostAgentService {
  // Agent -> Orchestrator: Register host
  rpc RegisterHost(RegisterHostRequest) returns (RegisterHostResponse);

  // Agent -> Orchestrator: Periodic heartbeat (unary)
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // Orchestrator -> Agent: Tell agent to update a container
  rpc UpdateContainer(UpdateContainerRequest) returns (UpdateContainerResponse);

  // Agent <-> Orchestrator: Stream update statuses
  rpc UpdateStatusStream(stream UpdateStatus) returns (stream UpdateStatus);
}

